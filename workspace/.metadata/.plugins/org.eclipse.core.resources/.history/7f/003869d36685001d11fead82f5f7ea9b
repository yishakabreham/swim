//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 2006-2015 OpenSim Ltd.
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//

#include "Router.h"
#include<iostream>
#include<sstream>
#include<vector>

using namespace std;

namespace queueing {

Define_Module(Router);

void Router::initialize()
{
    const char *algName = par("routingAlgorithm");
    serverWeight = "3,2,1,1,1";

    if (strcmp(algName, "random") == 0) {
        routingAlgorithm = ALG_RANDOM;
    }
    else if (strcmp(algName, "roundRobin") == 0) {
        routingAlgorithm = ALG_ROUND_ROBIN;
    }
    else if (strcmp(algName, "weightedRoundRobin") == 0) {
        routingAlgorithm = ALG_WEIGHTED_ROUND_ROBIN;
    }
    else if (strcmp(algName, "minQueueLength") == 0) {
        routingAlgorithm = ALG_MIN_QUEUE_LENGTH;
    }
    else if (strcmp(algName, "minDelay") == 0) {
        routingAlgorithm = ALG_MIN_DELAY;
    }
    else if (strcmp(algName, "minServiceTime") == 0) {
        routingAlgorithm = ALG_MIN_SERVICE_TIME;
    }

    rrCounter = -1;
    sumWeight = 0;
}

int Router::getWeightedServerIndex(int index, int jobno, vector<int> activeCapacities) {
    if(jobno < activeCapacities[index]){
        return index;
    } else {
        return Router::getWeightedServerIndex(index + 1, jobno - activeCapacities[index], activeCapacities);
    }
}

vector<int> Router::getActiveCapacities(string weightString, int serverNumber) {
    stringstream ss(weightString);
    vector<int> result;

    char ch;
    int tmp;
    int count = 0;

    while(ss >> tmp){
        if(count == serverNumber) break;

        sumWeight = sumWeight + tmp;
        result.push_back(tmp);
        ss >> ch;
        count++;
    }

    return result;
}

void Router::handleMessage(cMessage *msg)
{
    int outGateIndex = -1;  // by default we drop the message

    switch (routingAlgorithm) {
        case ALG_RANDOM:
            outGateIndex = par("randomGateIndex");
            break;

        case ALG_ROUND_ROBIN:
            rrCounter = (rrCounter + 1) % gateSize("out");
            outGateIndex = rrCounter;
            break;

        case ALG_WEIGHTED_ROUND_ROBIN:
        {
            vector<int> activeCapacities = Router::getActiveCapacities(serverWeight, gateSize("out"));
            rrCounter = (rrCounter + 1) % sumWeight;
            outGateIndex = Router::getWeightedServerIndex(0, rrCounter, activeCapacities);
            cout << "outIndex" << outGateIndex << "\n";
            break;
        }
        case ALG_MIN_QUEUE_LENGTH:
            // TODO implementation missing
            outGateIndex = -1;
            break;

        case ALG_MIN_DELAY:
            // TODO implementation missing
            outGateIndex = -1;
            break;

        case ALG_MIN_SERVICE_TIME:
            // TODO implementation missing
            outGateIndex = -1;
            break;

        default:
            outGateIndex = -1;
            break;
    }

    // send out if the index is legal
    if (outGateIndex < 0 || outGateIndex >= gateSize("out"))
        throw cRuntimeError("Invalid output gate selected during routing");

    send(msg, "out", outGateIndex);
}

}; //namespace

